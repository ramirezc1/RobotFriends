{"version":3,"sources":["constants.js","reducers.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","components/MainPage.js","containers/App.js","actions.js","serviceWorker.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","CardList","map","robot","key","Scroll","children","style","overflowY","border","height","SearchBox","onSearchChange","aria-label","onChange","type","placeholder","ErrorBoundary","props","state","hasError","info","this","setState","Component","MainPage","filterRobots","filter","toLowerCase","includes","onRequestRobots","React","App","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a881eaea.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport \"./Card.css\";\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc card dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=250x250`} alt=\"\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((robot) => (\n        <Card\n          key={robot.id}\n          id={robot.id}\n          name={robot.name}\n          email={robot.email}\n        ></Card>\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Scroll = ({ children }) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"600px\",\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nconst SearchBox = ({ onSearchChange }) => {\n  return (\n    <div className=\"pa3\">\n      <input\n        aria-label=\"Search\"\n        onChange={onSearchChange}\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        name=\"searchField\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\n\nexport default class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1> Oooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n","import React from \"react\";\n\nimport CardList from \"../components/CardList\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from \"../components/SearchBox\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\nclass MainPage extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  filterRobots = () => {\n    return this.props.robots.filter((robot) => {\n      return robot.name\n        .toLowerCase()\n        .includes(this.props.searchField.toLowerCase());\n    });\n  };\n  render() {\n    const { onSearchChange, isPending } = this.props;\n\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RobotFriends</h1>\n        <SearchBox onSearchChange={onSearchChange}></SearchBox>\n        <Scroll>\n          {isPending ? (\n            <h1>Loading...</h1>\n          ) : (\n            <ErrorBoundary>\n              <CardList robots={this.filterRobots()}></CardList>\n            </ErrorBoundary>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\n\nimport { requestRobots, setSearchField } from \"../actions\";\nimport MainPage from \"../components/MainPage\";\n\nconst mapStateToProps = (state) => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots()),\n});\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  render() {\n\n    return <MainPage {...this.props}></MainPage>\n    \n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_PENDING,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((users) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}