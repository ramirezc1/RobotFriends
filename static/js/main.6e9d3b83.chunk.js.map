{"version":3,"sources":["store/types.tsx","store/reducers.tsx","components/Card.tsx","components/CardList.tsx","components/Scroll.tsx","components/SearchBox.tsx","components/ErrorBoundary.tsx","components/MainPage.tsx","containers/App.tsx","store/actions.tsx","serviceWorker.js","index.tsx"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","CardList","map","robot","Scroll","props","style","overflowY","border","height","children","SearchBox","onSearchChange","aria-label","onChange","type","placeholder","ErrorBoundary","state","hasError","this","setState","Component","MainPage","filterRobots","filter","toLowerCase","includes","onRequestRobots","React","App","connect","searchRobots","requestRobots","dispatch","event","text","currentTarget","value","payload","fetch","then","response","json","users","user","filteredUsers","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mQAeaA,EAAsB,sBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCT/BC,EAAkC,CACtCC,YAAa,IAeTC,EAAiC,CACrCC,WAAW,EACXC,OAAQ,GACRC,MAAO,I,oCCTMC,G,YAhB+B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzD,OACE,sBAAKC,UAAU,4CAAf,UACE,qBACEC,IAAG,+BAA0BJ,EAA1B,iBACHG,UAAU,WACVE,IAAI,KAEN,gCACE,6BAAKJ,IACL,4BAAIC,YCYGI,EAnBkC,SAAC,GAI3C,IAHLT,EAGI,EAHJA,OAIA,OACE,8BACGA,EAAOU,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,CAEER,GAAIQ,EAAMR,GACVC,KAAMO,EAAMP,KACZC,MAAOM,EAAMN,OAHRM,EAAMR,UCENS,EAdA,SAACC,GACd,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAOGJ,EAAMK,YCOEC,EAfG,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,eACnB,OACE,qBAAKd,UAAU,MAAf,SACE,uBACEe,aAAW,SACXC,SAAUF,EACVd,UAAU,mCACViB,KAAK,SACLC,YAAY,gBACZpB,KAAK,mBCNQqB,E,kDACnB,WAAYZ,GAAmC,IAAD,8BAC5C,cAAMA,IACDa,MAAQ,CACXC,UAAU,GAHgC,E,gEAO5CC,KAAKC,SAAS,CAAEF,UAAU,M,+BAG1B,OAAIC,KAAKF,MAAMC,SACN,2DAEFC,KAAKf,MAAMK,a,GAdqBY,aCgC5BC,E,4MA5BbC,aAAe,WACb,OAAO,EAAKnB,MAAMb,OAAOiC,QAAO,SAACtB,GAC/B,OAAOA,EAAMP,KACV8B,cACAC,SAAS,EAAKtB,MAAMhB,YAAYqC,mB,kEANrCN,KAAKf,MAAMuB,oB,+BASH,IAAD,EAC+BR,KAAKf,MAAnCO,EADD,EACCA,eAAgBrB,EADjB,EACiBA,UAExB,OACE,sBAAKO,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWc,eAAgBA,IAC3B,cAAC,EAAD,UACGrB,EACC,4CAEA,cAAC,EAAD,UACE,cAAC,EAAD,CAAUC,OAAQ4B,KAAKI,4B,GAvBdK,IAAMP,WC0BvBQ,E,kLAEFV,KAAKf,MAAMuB,oB,+BAGX,OAAO,cAAC,EAAD,eAAcR,KAAKf,Y,GALZwB,IAAMP,WASTS,eAjCS,SAACb,GAAD,MAAuB,CAC7C7B,YAAa6B,EAAMc,aAAa3C,YAChCG,OAAQ0B,EAAMe,cAAczC,OAC5BD,UAAW2B,EAAMe,cAAc1C,UAC/BE,MAAOyB,EAAMe,cAAcxC,UAGF,SACzByC,GADyB,MAErB,CACJtB,eAAgB,SAACuB,GAAD,OACdD,GCX2BE,EDWHD,EAAME,cAAcC,MCXc,CAC5DvB,KAAM/B,EACNuD,QAASH,KAFmB,IAACA,GDY7BR,gBAAiB,kBAAMM,GCPU,SAACA,GAClCA,EAAS,CAAEnB,KAAM9B,IACjBuD,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJA,EAAM1C,KAAI,SAAC2C,GACT,MAAO,CAAEjD,KAAMiD,EAAKjD,KAAMD,GAAIkD,EAAKlD,GAAIE,MAAOgD,EAAKhD,aAGtD4C,MAAK,SAACK,GAAD,OACJZ,EAAS,CAAEnB,KAAM7B,EAAwBqD,QAASO,OAEnDC,OAAM,SAACtD,GAAD,OACLyC,EAAS,CAAEnB,KAAM5B,EAAuBoD,QAAS9C,cDexCsC,CAA6CD,GE/BtDkB,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTd,MAAK,SAAAmB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5Bb,OAAM,SAAAtD,GACLyE,QAAQzE,MAAM,4CAA6CA,MCnFjE,IAAM6E,EAASC,yBACTC,EAAcC,YAAgB,CAClCzC,aVDiC,WAGhB,IAFjBd,EAEgB,uDAFR9B,EACRsF,EACgB,uCAChB,OAAQA,EAAO3D,MACb,KAAK/B,EACH,OAAO,2BAAKkC,GAAZ,IAAmB7B,YAAaqF,EAAOnC,UACzC,QACE,OAAOrB,IUNXe,cVgBkC,WAGlB,IAFhBf,EAEe,uDAFP5B,EACRoF,EACe,uCACf,OAAQA,EAAO3D,MACb,KAAK9B,EACH,OAAO,2BAAKiC,GAAZ,IAAmB3B,WAAW,IAChC,KAAKL,EACH,OAAO,2BAAKgC,GAAZ,IAAmB1B,OAAQkF,EAAOnC,QAAShD,WAAW,IACxD,KAAKJ,EACH,OAAO,2BAAK+B,GAAZ,IAAmBzB,MAAOiF,EAAOnC,QAAShD,WAAW,IACvD,QACE,OAAO2B,MUzBPyD,EAAQC,YACZJ,EACAK,YAAgBC,IAAiBR,IAKnCS,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,SDRnB,SAAkB1B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,gBAAwBlC,OAAOC,SAASkC,MACpDC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,QAAQ,WAC9B,IAAMhC,EAAK,UAAM6B,gBAAN,sBAEPpC,IAgEV,SAAiCO,EAAOC,GAEtChB,MAAMe,EAAO,CACXiC,QAAS,CAAE,iBAAkB,YAE5B/C,MAAK,SAAAC,GAEJ,IAAM+C,EAAc/C,EAAS8C,QAAQE,IAAI,gBAEnB,MAApBhD,EAASiD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CnC,UAAUC,cAAcmC,MAAMpD,MAAK,SAAAmB,GACjCA,EAAakC,aAAarD,MAAK,WAC7BS,OAAOC,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1BT,OAAM,WACLmB,QAAQC,IACN,oEAvFA6B,CAAwBzC,EAAOC,GAI/BC,UAAUC,cAAcmC,MAAMpD,MAAK,WACjCyB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OCjB/BE,K","file":"static/js/main.6e9d3b83.chunk.js","sourcesContent":["import { IRobot } from \"../containers/App\";\n\n//state types\nexport interface SearchState {\n  searchField: string;\n}\n\nexport interface RobotState {\n  isPending: boolean;\n  robots: Array<IRobot>;\n  error: string;\n}\n\nexport type State = RobotState | SearchState;\n//Actions\nexport const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n\ninterface ChangeSearchFieldAction {\n  type: typeof CHANGE_SEARCH_FIELD;\n  payload: string;\n}\n\ninterface RequestRobotsPendingAction {\n  type: typeof REQUEST_ROBOTS_PENDING;\n}\n\ninterface RequestRobotsSuccessAction {\n  type: typeof REQUEST_ROBOTS_SUCCESS;\n  payload: Array<IRobot>;\n}\n\ninterface RequestRobotsFailedAction {\n  type: typeof REQUEST_ROBOTS_FAILED;\n  payload: string;\n}\n\nexport type ActionTypes =\n  | ChangeSearchFieldAction\n  | RequestRobotsPendingAction\n  | RequestRobotsSuccessAction\n  | RequestRobotsFailedAction;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_FAILED,\n  SearchState,\n  RobotState,\n  ActionTypes,\n} from \"./types\";\n\nconst initialStateSearch: SearchState = {\n  searchField: \"\",\n};\n\nexport const searchRobotsReducer = (\n  state = initialStateSearch,\n  action: ActionTypes\n): SearchState => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots: RobotState = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobotsReducer = (\n  state = initialStateRobots,\n  action: ActionTypes\n): RobotState => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { IRobot } from \"../containers/App\";\nimport \"./Card.css\";\n\nconst Card: React.FunctionComponent<IRobot> = ({ id, name, email }) => {\n  return (\n    <div className=\"tc card dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img\n        src={`https://robohash.org/${id}?size=250x250`}\n        className=\"card-img\"\n        alt=\"\"\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport { IRobot } from \"../containers/App\";\nimport Card from \"./Card\";\n\ntype Props = {\n  robots: Array<IRobot>;\n};\nconst CardList: React.FunctionComponent<Props> = ({\n  robots,\n}: {\n  robots: Array<IRobot>;\n}) => {\n  return (\n    <div>\n      {robots.map((robot) => (\n        <Card\n          key={robot.id}\n          id={robot.id}\n          name={robot.name}\n          email={robot.email}\n        ></Card>\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\ntype Props={\n  children?:JSX.Element\n}\nconst Scroll = (props:Props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"600px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\ninterface ISearchBoxProps {\n  onSearchChange(event: React.SyntheticEvent<HTMLInputElement>):void \n}\n\nconst SearchBox = ({ onSearchChange }:ISearchBoxProps) => {\n  return (\n    <div className=\"pa3\">\n      <input\n        aria-label=\"Search\"\n        onChange={onSearchChange}\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        name=\"searchField\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\n\ninterface IProps {}\n\ninterface IState {\n  hasError: boolean;\n}\n\nexport default class ErrorBoundary extends Component<IProps, IState> {\n  constructor(props: IProps | Readonly<IProps>) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1> Oooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n","import React from \"react\";\n\nimport CardList from \"./CardList\";\nimport Scroll from \"./Scroll\";\nimport SearchBox from \"./SearchBox\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport { AppProps } from \"../containers/App\";\n\nclass MainPage extends React.Component<AppProps> {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n  filterRobots = () => {\n    return this.props.robots.filter((robot) => {\n      return robot.name\n        .toLowerCase()\n        .includes(this.props.searchField.toLowerCase());\n    });\n  };\n  render() {\n    const { onSearchChange, isPending } = this.props;\n\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RobotFriends</h1>\n        <SearchBox onSearchChange={onSearchChange}></SearchBox>\n        <Scroll>\n          {isPending ? (\n            <h1>Loading...</h1>\n          ) : (\n            <ErrorBoundary>\n              <CardList robots={this.filterRobots()}></CardList>\n            </ErrorBoundary>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport \"./App.css\";\n\nimport { requestRobots, setSearchField } from \"../store/actions\";\nimport MainPage from \"../components/MainPage\";\nimport { RootState } from \"../index\";\nimport { ActionTypes } from \"../store/types\";\n\nconst mapStateToProps = (state: RootState) => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error,\n});\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<RootState, void, ActionTypes>\n) => ({\n  onSearchChange: (event: React.SyntheticEvent<HTMLInputElement>) =>\n    dispatch(setSearchField(event.currentTarget.value)),\n  onRequestRobots: () => dispatch(requestRobots()),\n});\n\nexport interface IRobot {\n  name: string;\n  id: number;\n  email: string;\n}\n\nexport type AppProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nclass App extends React.Component<AppProps> {\n  componentDidMount(): void {\n    this.props.onRequestRobots();\n  }\n  render() {\n    return <MainPage {...this.props} />;\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_PENDING,\n  ActionTypes,\n} from \"./types\";\nimport { Dispatch } from \"redux\";\nimport { IRobot } from \"../containers/App\";\n\nexport const setSearchField = (text: string): ActionTypes => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch: Dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((users) =>\n      users.map((user: any) => {\n        return { name: user.name, id: user.id, email: user.email };\n      })\n    )\n    .then((filteredUsers: Array<IRobot>) =>\n      dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: filteredUsers })\n    )\n    .catch((error: string) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { searchRobotsReducer, requestRobotsReducer } from \"./store/reducers\";\n\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({\n  searchRobots: searchRobotsReducer,\n  requestRobots: requestRobotsReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\") as HTMLElement\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}